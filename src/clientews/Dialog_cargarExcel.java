/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clientews;

import clases.DataSource;
import clases.FechaHora;
import clases.GestionTXT;
import static clientews.Dialog_formularioCursoCIA.luhnCheck;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author JuanJo
 */
public class Dialog_cargarExcel extends java.awt.Dialog {
    
    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    String ruta;
    ArrayList<String> columna = new ArrayList<String>();
    GestionTXT num_Secuencia = new GestionTXT();
    // Organizamos el formato de fecha
    DateFormat date = new SimpleDateFormat("yyyyMMdd");
    private DatosSalidaCursoCia objetoWS;
    
    /**
     * Creates new form Dialog_cargarExcel
     */
    public Dialog_cargarExcel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField_rutaArchivo = new javax.swing.JTextField();
        jLabel_idInfractor1 = new javax.swing.JLabel();
        jButton_cargarExcel = new javax.swing.JButton();
        jButton_cancelar = new javax.swing.JButton();
        jLabel_instrucciones = new javax.swing.JLabel();

        setResizable(false);
        setTitle("Cargar archivo EXCEL");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTextField_rutaArchivo.setEnabled(false);

        jLabel_idInfractor1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel_idInfractor1.setText("Ruta del archivo:");
        jLabel_idInfractor1.setToolTipText("");

        jButton_cargarExcel.setBackground(new java.awt.Color(102, 102, 255));
        jButton_cargarExcel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton_cargarExcel.setForeground(new java.awt.Color(255, 255, 255));
        jButton_cargarExcel.setText("Cargar");
        jButton_cargarExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_cargarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cargarExcelActionPerformed(evt);
            }
        });

        jButton_cancelar.setBackground(new java.awt.Color(102, 102, 255));
        jButton_cancelar.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton_cancelar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_cancelar.setText("Cancelar");
        jButton_cancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelarActionPerformed(evt);
            }
        });

        jLabel_instrucciones.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel_instrucciones.setText("Seleccione el archivo de excel haciendo click en el botón cargar");
        jLabel_instrucciones.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_cargarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_idInfractor1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField_rutaArchivo)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel_instrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel_instrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_idInfractor1)
                    .addComponent(jTextField_rutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton_cargarExcel)
                .addGap(18, 18, 18)
                .addComponent(jButton_cancelar)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jButton_cargarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cargarExcelActionPerformed
        // TODO add your handling code here:
        if (seleccionado.showDialog(this, "Abrir Archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
                if (archivo.canRead()) {
                    if (archivo.getName().endsWith("xlsx")) {
                        ruta = archivo.getAbsolutePath();
                        jTextField_rutaArchivo.setText(ruta);
                        int reply = JOptionPane.showConfirmDialog(null, "¿Esta seguro de enviar este archivo?", "Confirmación", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION)
                        {
                            try {
                                captDatosExcelXlsx(ruta);
                            } catch (IOException ex) {
                                Logger.getLogger(Dialog_cargarExcel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }else if(archivo.getName().endsWith("xls")){
                        ruta = archivo.getAbsolutePath();
                        jTextField_rutaArchivo.setText(ruta);
                        int reply = JOptionPane.showConfirmDialog(null, "¿Esta seguro de enviar este archivo?", "Confirmación", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION)
                        {
                            try {
                            captDatosExcelXls(ruta);
                            } catch (IOException ex) {
                                Logger.getLogger(Dialog_cargarExcel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        
                    }else{
                        JOptionPane.showMessageDialog(null,"Debe seleccionar un archivo excel con extensión XLSX", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
    }//GEN-LAST:event_jButton_cargarExcelActionPerformed

    private void jButton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton_cancelarActionPerformed


    
    //////////////////////FUNCIONES/////////////////////////////////
    
    public void captDatosExcelXls(String rutaArchivo) throws FileNotFoundException, IOException {
        
    
    FileInputStream file = new FileInputStream(new File(rutaArchivo));
    // Crear el objeto que tendra el libro de Excel
    HSSFWorkbook workbook = new HSSFWorkbook(file);
    /*
     * Obtenemos la primera pestaña a la que se quiera procesar indicando el indice.
     * Una vez obtenida la hoja excel con las filas que se quieren leer obtenemos el iterator
     * que nos permite recorrer cada una de las filas que contiene.
     */
    HSSFSheet sheet = workbook.getSheetAt(0);
    Iterator<Row> rowIterator = sheet.iterator();

    Row row;
    // Recorremos todas las filas para mostrar el contenido de cada celda
    while (rowIterator.hasNext()){
        row = rowIterator.next();
        // Obtenemos el iterator que permite recorres todas las celdas de una fila
        Iterator<Cell> cellIterator = row.cellIterator();
        Cell celda;

        if(row.getRowNum()==0){
            continue; //just skip the rows if row number is 0 or 1
        }
        while (cellIterator.hasNext()){
            celda = cellIterator.next();
            // Dependiendo del formato de la celda el valor se debe mostrar como String, Fecha, boolean, entero...
            switch(celda.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC:
                if( HSSFDateUtil.isCellDateFormatted(celda) )
                {
                   columna.add(date.format(celda.getDateCellValue()));
                }
                else
                {
                    String cellNum = Double.toString(celda.getNumericCellValue());
                    StringTokenizer tokens = new StringTokenizer(cellNum, ".");
                    while(tokens.hasMoreTokens())
                    {
                       columna.add(tokens.nextToken());
                    }
                }
                System.out.println(celda.getNumericCellValue());
                break;
            case Cell.CELL_TYPE_STRING:
                columna.add(celda.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                columna.add(Boolean.toString(celda.getBooleanCellValue()));
                break;
            }
        }

        Iterator<String> arrayC = columna.iterator();

        while (arrayC.hasNext()) {
            String next = arrayC.next();
            System.out.println(next);
        } 
        columna.clear();
    }
    // cerramos el libro excel
    workbook.close();
        
    }
    
    @SuppressWarnings("empty-statement")
    public void captDatosExcelXlsx(String rutaArchivo) throws IOException{
    
    FechaHora fecha = new FechaHora();
    DataSource datasource = new DataSource();

    FileInputStream file = new FileInputStream(new File(rutaArchivo));
    // Crear el objeto que tendra el libro de Excel
    XSSFWorkbook workbook = new XSSFWorkbook(file);
    /*
     * Obtenemos la primera pestaña a la que se quiera procesar indicando el indice.
     * Una vez obtenida la hoja excel con las filas que se quieren leer obtenemos el iterator
     * que nos permite recorrer cada una de las filas que contiene.
     */
    XSSFSheet sheet = workbook.getSheetAt(0);
    
    System.out.println(sheet.getLastRowNum()); // numero de filas
    int numConsecutivo = num_Secuencia.verificarTxt(sheet.getLastRowNum()); // Calcular el numero consecutivo
    
    Iterator<Row> rowIterator = sheet.iterator();
    Row row;
    // Recorremos todas las filas para mostrar el contenido de cada celda
    while (rowIterator.hasNext()){
        row = rowIterator.next();
        // Obtenemos el iterator que permite recorres todas las celdas de una fila
        Iterator<Cell> cellIterator = row.cellIterator();
        Cell celda;
        // evitamos que tome la primera
        if(row.getRowNum()==0){
            continue; //just skip the rows if row number is 0 or 1
        }

        while (cellIterator.hasNext()){
            celda = cellIterator.next();
            // Dependiendo del formato de la celda el valor se debe mostrar como String, Fecha, boolean, entero...
            switch(celda.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC:
                if( DateUtil.isCellDateFormatted(celda) ){
                   columna.add(date.format(celda.getDateCellValue()));
                  // System.out.println(celda.getDateCellValue());
                }else
                {
                    String cellNum = Double.toString(celda.getNumericCellValue());
                    StringTokenizer tokens = new StringTokenizer(cellNum, ".");
                    while(tokens.hasMoreTokens())
                    {
                       columna.add(tokens.nextToken());
                    }
                  //System.out.println(celda.getNumericCellValue());
                }
                break;
            case Cell.CELL_TYPE_STRING:
                columna.add(celda.getStringCellValue());
                //System.out.println(celda.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                columna.add(Boolean.toString(celda.getBooleanCellValue()));
                //System.out.println(celda.getBooleanCellValue());
                break;
            }
        }
        
        //   INICIO conexion al WS
        
        ObjectFactory instancia = new ObjectFactory(); // Instancia para crear objetos en general
        
        DatosEntradaCursoCia cursoCIA =  instancia.createDatosEntradaCursoCia(); // Instancia de la entrada de los Datos del curso CIA
        
        String nuevaFecha = fecha.fechaActual().substring(2,8);
              
        cursoCIA.setCiudadCia("11001000"); // Fijo
        cursoCIA.setCodigoCia("9002852265"); // Fijo
        cursoCIA.setCodigoCurso("000001"); // Fijo
        cursoCIA.setCodigoSedeCia("76834000"); // Fijo
        cursoCIA.setCodigoTransaccion("000003"); // Fijo
        cursoCIA.setDireccionAdquiriente(num_Secuencia.asignarIP());
        cursoCIA.setFechaRealizacionCurso(columna.get(24));
        cursoCIA.setFechaTransaccion(fecha.fechaActual());
        cursoCIA.setFuncionarioRegistra(columna.get(10));
        cursoCIA.setHoraFinCurso(columna.get(26));
        cursoCIA.setHoraInicioCurso(columna.get(25));
        cursoCIA.setHoraTransaccion(fecha.horaActual());
        cursoCIA.setIdentificacionInfractor(columna.get(12));
        cursoCIA.setIdentificacionInstructor(columna.get(28));
        cursoCIA.setNumeroSecuencia(nuevaFecha + Integer.toString(numConsecutivo));
        cursoCIA.setTipoIdentificacion(columna.get(11));
        
        CursoComparendo comparendosCursoCIA =  instancia.createCursoComparendo(); // Instancia de la entrada de los comparendos del Curso CIA
        
        /////////////// PONER CEROS A LA IZQUIERDA EN NUMERO REFERENCIA DESCUENTO (NUM_CERTIFICADO)///////////////////////
        
        String ceroNumCertificado = columna.get(27);
        
        if(columna.get(27).length() != 6)
        {
            for(int i=0 ; i < (6-columna.get(27).length()) ; i++)
            {
                ceroNumCertificado = "0" + ceroNumCertificado;
            }
        }
        
        String numeroReferenciaDescuento = nuevaFecha + ceroNumCertificado;
        numeroReferenciaDescuento += luhnCheck(numeroReferenciaDescuento);
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        comparendosCursoCIA.setFechaComparendo(columna.get(29)); // generar EXCEL
        comparendosCursoCIA.setNumeroCertificado(columna.get(27));
        comparendosCursoCIA.setNumeroComparendo(columna.get(13));
        comparendosCursoCIA.setNumeroResolucion(columna.get(14));
        comparendosCursoCIA.setOrganismoTransito(columna.get(15));
        comparendosCursoCIA.setReferenciaDescuento(numeroReferenciaDescuento);
        comparendosCursoCIA.setTipoComparendo(columna.get(30)); // generar EXCEL
               
        cursoCIA.getComparendos().add(comparendosCursoCIA); // Agregar los comparendos al ArrayList
        
        DatosSalidaCursoCia datosReporte = instancia.createDatosSalidaCursoCia();
        
        objetoWS = wsSimitCursoCia(cursoCIA);
        
        String mensajeEstado = "";
        
        if(objetoWS.getCodigoRespuesta().equals("0000"))
        {
            mensajeEstado = "OK";
        }
        else
        {
            mensajeEstado = "Error";
        }
              
        datosReporte.setCodigoRespuesta(mensajeEstado);
        datosReporte.setMensajeRespuesta(objetoWS.getMensajeRespuesta());
        datosReporte.setNumAutorizacion(objetoWS.getNumAutorizacion());
        datosReporte.setNumeroSecuencia(objetoWS.getNumeroSecuencia());
        
        agregarCursoReporte(datasource, datosReporte, cursoCIA, comparendosCursoCIA);
        
        numConsecutivo ++;
        
        columna.clear();

    }
    generarReporte(datasource);
    // cerramos el libro excel
    workbook.close();
    }
    
    //////////// INSTANCIA DEL REPORTE /////////////////
    
    public void agregarCursoReporte(DataSource datasource, DatosSalidaCursoCia cursoCIA, DatosEntradaCursoCia otrosDatosCursoCIA, CursoComparendo otrosDatosCursoComparendo)
    {
        datasource.addCursoSalida(cursoCIA, otrosDatosCursoCIA, otrosDatosCursoComparendo);
    }
    
    public void generarReporte(DataSource datasource) throws IOException
    {
        InputStream inputStream = null;
        JasperPrint jasperPrint= null;
       
       try {
            inputStream = new FileInputStream ("src/reporte/estadoRegistroCursosCIA.jrxml");
        } catch (FileNotFoundException ex) {
           JOptionPane.showMessageDialog(null,"Error al leer el fichero de carga jasper report "+ex.getMessage());
        }
        
        try{
            FechaHora hora = new FechaHora();
            JFileChooser file=new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo PDF", "pdf");
            file.setFileFilter(filtro);
            file.setDialogTitle("Guardar reporte");
            file.setSelectedFile(new File("reporteCursoCIA" + hora.fechaActual() + hora.horaActual()));
            int opcion = file.showSaveDialog(this);
            
            switch (opcion) 
            {
                case JFileChooser.APPROVE_OPTION:
                {
                    File guardar =file.getSelectedFile();

                    if(guardar !=null)
                    {
                     /*guardamos el archivo y le damos el formato directamente,
                      * si queremos que se guarde en formato doc lo definimos como .doc*/
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, null, datasource);
                        JasperExportManager.exportReportToPdfFile(jasperPrint, guardar + ".pdf");
                        Desktop.getDesktop().open(new File(guardar + ".pdf"));
                        //JOptionPane.showMessageDialog(null, "El archivo se ha guardado exitosamente", "Información",JOptionPane.INFORMATION_MESSAGE);
                      }
                      break;
                }
                case JFileChooser.CANCEL_OPTION:
                {
                    this.dispose();
                    break;
                }  
                case JFileChooser.ERROR_OPTION:
                {
                    JOptionPane.showMessageDialog(null, "Error en el guardado de archivo", "Error",JOptionPane.ERROR_MESSAGE);
                    break;
                }
                  
            }
            
            

        }catch (JRException e){
            JOptionPane.showMessageDialog(null,"Error al cargar fichero jrml jasper report "+e.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton_cancelar;
    public javax.swing.JButton jButton_cargarExcel;
    private javax.swing.JLabel jLabel_idInfractor1;
    private javax.swing.JLabel jLabel_instrucciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField_rutaArchivo;
    // End of variables declaration//GEN-END:variables

    private static DatosSalidaCursoCia wsSimitCursoCia(clientews.DatosEntradaCursoCia oe) {
        clientews.WSSimitCursoService service = new clientews.WSSimitCursoService();
        clientews.WSSimitCurso port = service.getWSSimitCursoPort();
        return port.wsSimitCursoCia(oe);
    }
}
