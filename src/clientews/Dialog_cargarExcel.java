/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clientews;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author JuanJo
 */
public class Dialog_cargarExcel extends java.awt.Dialog {
    
    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    String ruta;
    ArrayList<String> columna = new ArrayList<String>();
    // Organizamos el formato de fecha
    DateFormat date = new SimpleDateFormat("yyyyMMdd");
    
    /**
     * Creates new form Dialog_cargarExcel
     */
    public Dialog_cargarExcel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField_rutaArchivo = new javax.swing.JTextField();
        jButton_cargarExcel = new javax.swing.JButton();
        jButton_cancelar = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jButton_cargarExcel.setBackground(new java.awt.Color(255, 204, 102));
        jButton_cargarExcel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton_cargarExcel.setText("Cargar");
        jButton_cargarExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_cargarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cargarExcelActionPerformed(evt);
            }
        });

        jButton_cancelar.setBackground(new java.awt.Color(255, 204, 102));
        jButton_cancelar.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton_cancelar.setText("Cancelar");
        jButton_cancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(152, Short.MAX_VALUE)
                .addComponent(jTextField_rutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
            .addGroup(layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_cargarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jTextField_rutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton_cargarExcel)
                .addGap(18, 18, 18)
                .addComponent(jButton_cancelar)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jButton_cargarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cargarExcelActionPerformed
        // TODO add your handling code here:
        if (seleccionado.showDialog(this, "Abrir Archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
                if (archivo.canRead()) {
                    if (archivo.getName().endsWith("xlsx")) {
                        ruta = archivo.getAbsolutePath();
                        jTextField_rutaArchivo.setText(ruta);
                        try {
                            captDatosExcelXlsx(ruta);
                        } catch (IOException ex) {
                            Logger.getLogger(Dialog_cargarExcel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else if(archivo.getName().endsWith("xls")){
                        ruta = archivo.getAbsolutePath();
                        jTextField_rutaArchivo.setText(ruta);
                        try {
                            captDatosExcelXls(ruta);
                        } catch (IOException ex) {
                            Logger.getLogger(Dialog_cargarExcel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Seleccionar un archivo excel con extencion XLSX ");
                    }
                }
            }
    }//GEN-LAST:event_jButton_cargarExcelActionPerformed

    private void jButton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
        JFrame_Principal user = new JFrame_Principal();
        user.setVisible(true);
        user.pack();
    }//GEN-LAST:event_jButton_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dialog_cargarExcel dialog = new Dialog_cargarExcel(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    //////////////////////FUNCIONES/////////////////////////////////
    
    public void captDatosExcelXls(String rutaArchivo) throws FileNotFoundException, IOException {
        
    FileInputStream file = new FileInputStream(new File(rutaArchivo));
    // Crear el objeto que tendra el libro de Excel
    HSSFWorkbook workbook = new HSSFWorkbook(file);
    /*
     * Obtenemos la primera pesta√±a a la que se quiera procesar indicando el indice.
     * Una vez obtenida la hoja excel con las filas que se quieren leer obtenemos el iterator
     * que nos permite recorrer cada una de las filas que contiene.
     */
    HSSFSheet sheet = workbook.getSheetAt(0);
    Iterator<Row> rowIterator = sheet.iterator();

    Row row;
    // Recorremos todas las filas para mostrar el contenido de cada celda
    while (rowIterator.hasNext()){
        row = rowIterator.next();
        // Obtenemos el iterator que permite recorres todas las celdas de una fila
        Iterator<Cell> cellIterator = row.cellIterator();
        Cell celda;

        if(row.getRowNum()==0){
            continue; //just skip the rows if row number is 0 or 1
        }
        while (cellIterator.hasNext()){
            celda = cellIterator.next();
            // Dependiendo del formato de la celda el valor se debe mostrar como String, Fecha, boolean, entero...
            switch(celda.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC:
                if( HSSFDateUtil.isCellDateFormatted(celda) )
                {
                   columna.add(date.format(celda.getDateCellValue()));
                }
                else
                {
                   columna.add(Double.toString(celda.getNumericCellValue()));
                }
                System.out.println(celda.getNumericCellValue());
                break;
            case Cell.CELL_TYPE_STRING:
                columna.add(celda.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                columna.add(Boolean.toString(celda.getBooleanCellValue()));
                break;
            }
        }

        Iterator<String> arrayC = columna.iterator();

        while (arrayC.hasNext()) {
            String next = arrayC.next();
            System.out.println(next);
        } 
        columna.clear();
    }
    // cerramos el libro excel
    workbook.close();
        
    }
    
    @SuppressWarnings("empty-statement")
    public void captDatosExcelXlsx(String rutaArchivo) throws IOException{
    
    FileInputStream file = new FileInputStream(new File(rutaArchivo));
    // Crear el objeto que tendra el libro de Excel
    XSSFWorkbook workbook = new XSSFWorkbook(file);
    /*
     * Obtenemos la primera pesta√±a a la que se quiera procesar indicando el indice.
     * Una vez obtenida la hoja excel con las filas que se quieren leer obtenemos el iterator
     * que nos permite recorrer cada una de las filas que contiene.
     */
    XSSFSheet sheet = workbook.getSheetAt(0);
    Iterator<Row> rowIterator = sheet.iterator();
    Row row;
    // Recorremos todas las filas para mostrar el contenido de cada celda
    while (rowIterator.hasNext()){
        row = rowIterator.next();
        // Obtenemos el iterator que permite recorres todas las celdas de una fila
        Iterator<Cell> cellIterator = row.cellIterator();
        Cell celda;
        // evitamos que tome la primera
        if(row.getRowNum()==0){
            continue; //just skip the rows if row number is 0 or 1
        }

        while (cellIterator.hasNext()){
            celda = cellIterator.next();
            // Dependiendo del formato de la celda el valor se debe mostrar como String, Fecha, boolean, entero...
            switch(celda.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC:
                if( DateUtil.isCellDateFormatted(celda) ){
                   columna.add(date.format(celda.getDateCellValue()));
                  // System.out.println(celda.getDateCellValue());
                }else{
                  columna.add(Double.toString(celda.getNumericCellValue()));
                  //System.out.println(celda.getNumericCellValue());
                }
                break;
            case Cell.CELL_TYPE_STRING:
                columna.add(celda.getStringCellValue());
                //System.out.println(celda.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                columna.add(Boolean.toString(celda.getBooleanCellValue()));
                //System.out.println(celda.getBooleanCellValue());
                break;
            }
        }
        
        Iterator<String> arrayC = columna.iterator();
        
        while (arrayC.hasNext()) 
        {
            String next = arrayC.next();
            System.out.println(next);
        } 
        
        columna.clear();

    }

    // cerramos el libro excel
    workbook.close();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton_cancelar;
    public javax.swing.JButton jButton_cargarExcel;
    private javax.swing.JTextField jTextField_rutaArchivo;
    // End of variables declaration//GEN-END:variables
}
